# cmake_minimum_required(VERSION 3.7)
# set(CMAKE_CXX_STANDARD 17)
# set(CMAKE_VERBOSE_MAKEFILEON ON)

# # find_package(Boost 1.51.0 MODULE
# #   COMPONENTS
# #     context
# #     filesystem
# #     program_options
# #     regex
# #     system
# #     thread
# #   REQUIRED
# # )
# # list(APPEND FOLLY_LINK_LIBRARIES ${Boost_LIBRARIES})
# # list(APPEND FOLLY_INCLUDE_DIRECTORIES ${Boost_INCLUDE_DIRS})

# # # set(FOLLY_CMAKE_DIR /usr/local/include/folly/lib/cmake/)
# # # if (NOT TARGET Folly::folly)
# # #   include("${FOLLY_CMAKE_DIR}/folly-targets.cmake")
# # # endif()
# # find_package(folly REQUIRED)

# # find_package(Threads REQUIRED)
# # find_package(gflags REQUIRED)
# # find_package(fmt REQUIRED)
# # find_package(Glog REQUIRED)

# # set(FOLLY_HAVE_LIBGLOG ${GLOG_FOUND})
# # list(APPEND FOLLY_LINK_LIBRARIES ${GLOG_LIBRARY})
# # list(APPEND FOLLY_INCLUDE_DIRECTORIES ${GLOG_INCLUDE_DIR})


# # list(APPEND FOLLY_INCLUDE_DIRECTORIES ${folly_INCLUDE_DIRS})
# # # include_directories(${folly_INCLUDE_DIRS})


# # set(FOLLY_LIBRARIES Folly::folly)
# # list(APPEND FOLLY_LINK_LIBRARIES ${FOLLY_LIBRARIES})
# # if (NOT folly_FIND_QUIETLY)
# #   message(STATUS "Found folly: ${PACKAGE_PREFIX_DIR}")
# # endif()

# find_package(PkgConfig REQUIRED)
# pkg_check_modules(FOLLY REQUIRED libfolly gtest gflags libglog)

# add_executable(demo demo.cpp)
# target_include_directories(demo PUBLIC ${FOLLY_INCLUDE_DIRS})
# # target_include_directories(demo INTERFACE ${FOLLY_INCLUDE_DIRECTORIES})
# message(STATUS "${FOLLY_LINK_LIBRARIES}")
# target_link_libraries(demo PUBLIC ${FOLLY_LINK_LIBRARIES}
# /usr/local/lib/libfollybenchmark.a
# )
# # target_link_libraries(demo ${FOLLY_LINK_LIBRARIES})
# target_compile_options(demo PUBLIC ${FOLLY_CFLAGS_OTHER})


cmake_minimum_required(VERSION 3.7)
project(demo CXX C ASM)

find_package(Boost REQUIRED)
find_package(folly REQUIRED)
find_package(Threads REQUIRED)
find_package(gflags REQUIRED)
find_package(glog REQUIRED)

find_package(fmt REQUIRED)

set(CMAKE_CXX_STANDARD 20)
#include_directories(${Boost_INCLUDE_DIRS})
#include_directories(${folly_INCLUDE_DIRS})

# add_compile_definitions(_GLIBCXX_USE_CXX11_ABI=0)
set(BUILD_SHARED_LIBS ON)
set_and_check(FOLLY_INCLUDE_DIR /usr/local/include/folly)
set_and_check(FOLLY_CMAKE_DIR /usr/local/lib/cmake/folly)
if (NOT TARGET Folly::folly)
  include("${FOLLY_CMAKE_DIR}/folly-targets.cmake")
endif()

set(FOLLY_LIBRARIES Folly::folly)

if (NOT folly_FIND_QUIETLY)
  message(STATUS "Found folly: ${PACKAGE_PREFIX_DIR}")
endif()
set (CMAKE_CXX_FLAGS -fcoroutines)
add_executable(HelloWorld demo.cpp)
# add_executable(H1 demo01.cpp)
target_link_libraries(HelloWorld ${Boost_LIBRARIES} ${FOLLY_LIBRARIES} )
# target_link_libraries(H1 ${Boost_LIBRARIES} ${FOLLY_LIBRARIES} )